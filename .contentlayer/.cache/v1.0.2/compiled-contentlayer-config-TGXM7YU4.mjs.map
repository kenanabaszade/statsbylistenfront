{
  "version": 3,
  "sources": ["../../../data/config/metadata.js", "../../../data/config/site.settings.js", "../../../contentlayer.config.ts"],
  "sourcesContent": ["const metadata = {\n  title: 'Welcome to Stats by Listen',\n  description: 'Stats by Listen is a financial data product by Listen.',\n  domain: 'stats.hellopragmatic.com',\n  logoTitle: '',\n  businessName: 'Listen',\n  siteUrl: 'https://stats.hellopragmatic.com',\n  siteRepo: '',\n  socialBanner: '/api/og',\n  supportEmail: 'johnnie@listen.co',\n  email: 'johnnie@listen.co',\n  twitter: 'https://twitter.com/listendotco',\n  instagram: 'https://instagram.com/listendotco',\n  tiktok: '',\n  github: '',\n  linkedin: 'https://www.linkedin.com/company/listenventures/',\n  youtube: '',\n  facebook: '',\n  threads: '',\n  mastodon: '',\n  author: 'Listen',\n  language: 'en-us',\n  theme: 'system',\n  locale: 'en-US'\n};\n\nmodule.exports = { metadata };", "const { metadata } = require('./metadata');\n\n/** @typedef {import(\"siteSettingsInterface.ts\").SiteConfig } */\nconst siteConfig = {\n  ...metadata,\n\n  blogPath: '', // The location of all blog pages under 'data'. Empty string means 'data' (default). Best for SEO is to have articles under the root path.\n  allArticlesPath: '/all-articles', // The name of the page where you can see a list of all articles (needs to match app/all-articles/page.tsx)\n\n  // Configure analytics\n  disableAnalytics: false, // Disable all analytics on the site\n  analytics: {\n    // By default Vercel analytics is enabled.\n    //\n    // If you want to use an analytics provider you have to add it to the\n    // content security policy in the `next.config.js` file.\n    // supports Plausible, Simple Analytics, Umami, Posthog or Google Analytics.\n    // umamiAnalytics: {\n    //   // We use an env variable for this site to avoid other users cloning our analytics ID\n    //   umamiWebsiteId: '', // e.g. 123e4567-e89b-12d3-a456-426614174000\n    // },\n    // plausibleAnalytics: {\n    //   plausibleDataDomain: '', // e.g. insert-business-name.vercel.app\n    // },\n    // simpleAnalytics: {},\n    // posthogAnalytics: {\n    //   posthogProjectApiKey: '', // e.g. 123e4567-e89b-12d3-a456-426614174000\n    // },\n    // googleAnalytics: {\n    //   googleAnalyticsId: '', // e.g. G-XXXXXXX\n    // },\n  },\n\n  newsletter: {\n    // Optional: enable newsletter\n    // provider: 'emailoctopus',\n  },\n  search: true, // Enable or disable search\n};\n\nmodule.exports = { siteConfig };\n", "import {\n  defineDocumentType,\n  ComputedFields,\n  makeSource,\n} from 'shipixen-contentlayer/source-files';\nimport { writeFileSync } from 'fs';\nimport readingTime from 'reading-time';\nimport GithubSlugger from 'github-slugger';\nimport path from 'path';\n// Remark packages\nimport remarkGfm from 'remark-gfm';\nimport remarkMath from 'remark-math';\nimport {\n  remarkExtractFrontmatter,\n  remarkCodeTitles,\n  remarkImgToJsx,\n  extractTocHeadings,\n} from '@shipixen/pliny/mdx-plugins/index.js';\n// Rehype packages\nimport rehypeSlug from 'rehype-slug';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeKatex from 'rehype-katex';\nimport rehypeCitation from 'rehype-citation';\nimport rehypePrismPlus from 'rehype-prism-plus';\nimport rehypePresetMinify from 'rehype-preset-minify';\nimport { siteConfig } from './data/config/site.settings';\nimport {\n  allCoreContent,\n  sortPosts,\n} from '@shipixen/pliny/utils/contentlayer.js';\n\nconst root = process.cwd();\nconst isProduction = process.env.NODE_ENV === 'production';\n\nconst computedFields: ComputedFields = {\n  readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\n  slug: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath.replace(/^.+?(\\/)/, ''),\n  },\n  path: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath,\n  },\n  filePath: {\n    type: 'string',\n    resolve: (doc) => doc._raw.sourceFilePath,\n  },\n  toc: { type: 'json', resolve: (doc) => extractTocHeadings(doc.body.raw) },\n};\n\n/**\n * Count the occurrences of all tags across blog posts and write to json file\n */\nfunction createTagCount(allBlogs) {\n  const tagCount: Record<string, number> = {};\n  allBlogs.forEach((file) => {\n    if (file.tags && (!isProduction || file.draft !== true)) {\n      file.tags.forEach((tag) => {\n        const formattedTag = GithubSlugger.slug(tag);\n        if (formattedTag in tagCount) {\n          tagCount[formattedTag] += 1;\n        } else {\n          tagCount[formattedTag] = 1;\n        }\n      });\n    }\n  });\n  writeFileSync('./app/tag-data.json', JSON.stringify(tagCount));\n}\n\nfunction createSearchIndex(allBlogs) {\n  if (siteConfig?.search === true) {\n    writeFileSync(\n      `public/search.json`,\n      JSON.stringify(allCoreContent(sortPosts(allBlogs))),\n    );\n    console.log('Local search index generated...');\n  }\n}\n\nconst BLOG_URL = siteConfig.blogPath ? `${siteConfig.blogPath}/` : '';\n\nexport const Blog = defineDocumentType(() => ({\n  name: 'Blog',\n  filePathPattern: `${BLOG_URL}**/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    tags: { type: 'list', of: { type: 'string' }, default: [] },\n    lastmod: { type: 'date' },\n    draft: { type: 'boolean' },\n    summary: { type: 'string' },\n    images: { type: 'json' },\n    authors: { type: 'list', of: { type: 'string' } },\n    layout: { type: 'string' },\n    bibliography: { type: 'string' },\n    canonicalUrl: { type: 'string' },\n  },\n  computedFields: {\n    ...computedFields,\n    structuredData: {\n      type: 'json',\n      resolve: (doc) => ({\n        '@context': 'https://schema.org',\n        '@type': 'BlogPosting',\n        headline: doc.title,\n        datePublished: doc.date,\n        dateModified: doc.lastmod || doc.date,\n        description: doc.summary,\n        image: doc.images ? doc.images[0] : siteConfig.socialBanner,\n        url: `${siteConfig.siteUrl}/${doc._raw.flattenedPath}`,\n        author: doc.authors,\n      }),\n    },\n  },\n}));\n\nexport const Authors = defineDocumentType(() => ({\n  name: 'Authors',\n  filePathPattern: 'authors/**/*.md',\n  contentType: 'mdx',\n  fields: {\n    name: { type: 'string', required: true },\n    avatar: { type: 'string' },\n    occupation: { type: 'string' },\n    company: { type: 'string' },\n    email: { type: 'string' },\n    twitter: { type: 'string' },\n    linkedin: { type: 'string' },\n    github: { type: 'string' },\n    layout: { type: 'string' },\n  },\n  computedFields,\n}));\n\nexport default makeSource({\n  contentDirPath: 'data',\n  documentTypes: [Blog, Authors],\n  mdx: {\n    cwd: process.cwd(),\n    remarkPlugins: [\n      remarkExtractFrontmatter,\n      remarkGfm,\n      remarkCodeTitles,\n      remarkMath,\n      remarkImgToJsx,\n    ],\n    rehypePlugins: [\n      rehypeSlug,\n      rehypeAutolinkHeadings,\n      rehypeKatex,\n      [rehypeCitation, { path: path.join(root, 'data') }],\n      [rehypePrismPlus, { defaultLanguage: 'js', ignoreMissing: true }],\n      rehypePresetMinify,\n    ],\n  },\n  onMissingOrIncompatibleData: 'skip-warn',\n  onSuccess: async (importData) => {\n    const { allBlogs } = await importData();\n    createTagCount(allBlogs);\n    createSearchIndex(allBlogs);\n  },\n});\n"],
  "mappings": "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",
  "names": ["siteConfig"]
}
